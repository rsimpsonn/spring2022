<html lang='en'>
<head>
    <!-- Meta info -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1">
    <meta content="Computing Foundations: Data, Fall 2018" name="description">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>CSCI 0111 | Learning</title>
    <!-- CSS and Fonts -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="assets/css/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Lato&family=Noto+Serif&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Merriweather&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500&family=Raleway&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Cookie%7CEB+Garamond%7CMarkazi+Text%7CRoboto:400,900%7CKarla:400,700%7COpen+Sans" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous"></head>

<body>
    <!-- skip link -->
    <span class="menu">
    <a id="skip-nav" class="sr-only sr-only-focusable" href="#main">Skip to main content</a>
    <!-- Header -->
    <header role="banner">
    <div id="header-wrapper"><div id="header" class="header">
    </header>
    <!-- Mobile navigation bar -->
    <!-- <div id="header-pic"></div> -->
    <nav role="navigation">
    <div id="nav-wrapper">
        <div id="sidebar">
				<div id="index-nav"><a href="index.html" class="nav-button">CS111</a></div>
				<div id="Lectures-nav"><a href="lectures.html" class="nav-button">Lectures</a></div>
				<div id="assignments-nav"><a href="assignments.html" class="nav-button">Assignments</a></div>
				<div id="Sections-nav"><a href="labs.html" class="nav-button">Labs</a></div>
				<div clas='relative' id="Sections-nav"><a href="learning.html" class="nav-button active">Learning</a></div>
				<div id="documents-nav"><a href="documents.html" class="nav-button">Resources</a></div>
				<div id="software-nav"><a href="software.html" class="nav-button">Software</a></div>
				<div id="Calendar-nav"><a href="calendar.html" class="nav-button">Calendar</a></div>
				<div id="Staff-nav"><a href="staff.html" class="nav-button">Staff</a></div>
				<div id="Piazza-nav"><a href="https://edstem.org/us/courses/12806/discussion/" target="_blank" class="nav-button">Edstem</a>
        </div>
        <div class="menu-button">
            <div class="line1"></div>
            <div class="line2"></div>
            <div class="line3"></div>
        </div>
    </div>
    </nav>
</div></div>
</span>
<!--Content-->
<main id="main" role="main">
    <div id="content-wrapper">
    <div class="content">
    	<div id="documents-content">
		        <h1>Learning in CS0111</h1>

			<h2>Learning in Lecture and Lab</h2>

			<p>Lectures in the course will involve a fair bit of hands-on
			activities and discussion. Learning happens when someone is
			actively thinking about material and making connections
			between new material and already-known material. The lectures
			are designed to facilitate this, but you have to meet us
			halfway to make this work.</p>

			<p>In particular, you are expected to participate in small
			group discussions as they arise during lecture. Sharing ideas
			on problems helps both you and your classmates (in hearing and
			responding to ideas of others, you strengthen your own
			conceptions of material).</p>

			<p>Similarly, when we share out ideas from small groups to the
			class, talk and respond to each other, rather than expect the
			professor or staff to mediate. We'll hop in if we think a
			point is being overlooked, but we want to encourage discussion
			within the class (again, because this is how you'll learn the
			material better).</p>

			<p>In part, this means that reading notes and watching lecture
			capture will only get you so far. We provide these as tools
			for reviewing content or catching up if you have to miss a day
			here and there, but they will not be good substitutes for
			being in class and participating in the activities and
			discussions.</p>

			<h2>Learning to Program</h2>

			<p>Learning to program involves developing several skills. We
			present this list not to overwhelm you, but to help you manage
			your learning. Each of you will find some of these skills
			easier to master than others. Paying attention to which skills
			you’ve mastered and which need more practice will help you
			focus your time and efforts in the class.</p>

			<ul>
			  <li>
			    <p>Writing computations in the structured and
			    precise notation of a programming language</p>
			  </li>
			  <li>
			    <p>Understanding how the computer evaluates/runs
			    programs in a given programming language</p>
			  </li>
			  <li>
			    <p>Breaking down problems into individual steps
			    that you can express in the programming
			    language, then combine to produce a program that
			    solves the give problem</p>
			  </li>
			  <li>
			    <p>Reading existing programs (your own or
			    others) to understand how and why they (don’t)
			    work</p>
			  </li>
			  <li>
			    <p>Locating and correcting errors in
			    programs</p>
			  </li>
			  <li>
			    <p>Communicating the design and intent of your
			    programs to those who may read them later</p>
			  </li>
			  <li>
			    <p>Testing that your program does what it is
			    supposed to do</p>
			  </li>
			</ul>

			<h2>Learning Tips</h2>
			<h3>Write code, don’t just read it</h3>
			<p>Learning to program involves internalizing the
			      patterns within code: what statements are needed, where
			      do they go, what statements are used for which tasks,
			      etc. When you have internalized a code pattern, your
			      brain can retrieve and reproduce it when you are given a
			      similar problem to solve. You internalize code patterns
			      by actually writing them down, not by reading them
			      (writing and reading exercise different processes within
			      the brain). This is also important because the order in
			      which we write lines of code and the order in which we
			      read them tend to be different. You need to practice
			      each skill (reading and writing) independently.</p>

			<p><i><b>Tip:</b> When we cover new programming
			      concepts, the notes will often list some additional
			      practice problems.  Try a couple of these to help your code
			      writing come naturally, without your
			      having to look back on your notes.</i></p>

			<h3>View CS as learning processes, not facts</h3>
			<p>In some courses, you
			      basically need to learn a bunch of facts and formulas
			      and when to apply them. Programming is different: much
			      of it is about learning a process of creating something
			      or solving a problem, not about memorizing stuff
			      (there’s a bit of memorizing stuff, but memorizing isn’t
			      enough). Don’t expect to learn the material by reading
			      it over and over. Instead, work on learning the steps we
			      take and the questions we ask to make progress on
			      problems. This goes back to the previous point: you
			      won’t learn CS just by reading.</p>

			<p><i><b>Tip:</b> As you study, try to
			      articulate the steps that we took to solve each
			      problem. Don’t just try to memorize
			      solutions.</i></p>

			    <!--
			    <li>
			      <p><span class="tipsummary">View quizzes and clickers as
			      learning, not testing</span> Much interesting research
			      has been coming out about the value of testing in
			      learning. When you encounter a new fact, your brain
			      might store it, but that doesn’t mean that your brain
			      can find it again. In order for you to retrieve facts,
			      your brain needs to have recalled them several times in
			      a useful context. Repeated access to factual information
			      over a period of several days or weeks is what leads to
			      long-term retention of information.  Quizzes and clicker
			      questions are designed to help you with this retrieval
			      process.</p>
			      <p><span class="tip">Tip: Participate in the clicker
			      questions in class. Recognize quizzes as a tool to help
			      you learn, not just a method of asssessment. Our grading
			      system is based on points earned in themes rather than
			      per-assessment averages so that you can make some
			      mistakes but still demonstrate learning a topic later in
			      the course.</span></p>
			      </li>
			    -->

			    <h3>Manually simulate how code runs on paper</h3>
			    <p>We understand concepts by building
			      models of how they work. Think of a model as a high
			      level map that helps you see how the various pieces of a
			      problem fit together and evolve over time. If you
			      develop a model of how programs work, for example, then
			      you can use the model to understand and predict how new
			      lines of code should fit into the program. Models are
			      also important because they can break a larger problem
			      into the sub-parts that you need to understand to make
			      sense of the whole problem. Working through models can
			      help you (and us) figure out the actual part of the
			      problem on which you are stuck.</p>

			    <p><i><b>Tip:</b> We will show you various
			      models of how programs work and how data ties together.
			      Practice using these models for specific programs,
			      until you are confident that you understand how your
			      programs run. Bring your models to office hours if you
			      aren’t sure about how they work. Working with the models
			      targets the low-level building blocks of learning to
			      program.</i></p>

			      <h3>Don’t believe in a "geek gene": you can learn this with practice</h3>
			      <p>People
			      often believe that programming and computer science is
			      something that some people are "born" to do while others
			      are not. At this level, this idea is false. It is true
			      that different people absorb the techniques faster than
			      others, but that doesn’t mean that only those with the
			      "geek gene" can do well in CS. Approach CS as something
			      that you can learn with practice; don’t tell yourself "I
			      can’t do this because I’m not a CS person". There’s much
			      interesting research on something called mindset: very
			      roughly, it says that if you assume intelligence is
			      fixed rather than flexible, you engage differently with
			      material.</p>

			      <p><i><b>Tip:</b> Don’t fall into the trap of
			      thinking that you can’t learn this. Some of your
			      classmates have programmed before. Not surprisingly,
			      that means they are better at it than you are right
			      now. That doesn’t mean that you can’t learn to do this
			      too. Work with the practice problems and the course
			      staff.</i></p>
			</div>
		</div>

    </div>
    </div>
</main>
    <!--Footer-->
    <footer role="contentinfo">
    <div id="footer-wrapper"><div id="footer">
    <p>2021 CSCI 0111 Staff | Brown University Computer Science Department</p>
</div></div><!-- Scripts -->
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/reuseable.js"></script>
    </footer>
</body>
</html>
